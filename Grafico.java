
package GraficoBarra;

import java.awt.Color;
import java.awt.Graphics;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Enrique
 */
public class Grafico extends javax.swing.JPanel implements Serializable{

       private Valores valores = new Valores (255, 255, 255,Arrays.asList("Uno","Dos"),Arrays.asList("Titulo 1","Titulo 2"),Arrays.asList(2,5));
          Barra barra = new Barra(Arrays.asList("Uno","Dos"),Arrays.asList("Titulo 1","Titulo 2"),Arrays.asList(2,5));
    int primero = 0;
    int ultimo = 0;
    int valor = 0;
    public Grafico() {
        initComponents();

        Collections.sort(barra.getValores());
             primero = barra.getValores().get(0);
             ultimo = barra.getValores().get(barra.getValores().size()-1);
             valor = ultimo/barra.getValores().size();
            for (int i = 0; i < ultimo; i+=valor) {
                if(i>10)
                rango.add((int)(Math.round( i / 10.0) * 10));
                else rango.add(i);}
            rango.add(barra.getValores().get(barra.getValores().size()-1)+valor);
            
  
            
            
    }

    
       

    public Valores getValores() {
        
        return valores;
    }
    
    List<Integer> rango = new ArrayList<>();
    List<Integer> rangoTam = new ArrayList<>();
    public void setValores(Valores val) {
        Valores old = this.valores;
        this.valores = val;
            firePropertyChange("valores", old, val);
            
            Collections.sort(barra.getValores());
             primero = barra.getValores().get(0);
             ultimo = barra.getValores().get(barra.getValores().size()-1);
             valor = ultimo/(barra.getValores().size()-1);
            for (int i = 0; i < ultimo; i+=valor) 
                rango.add((int)(Math.round( i / 10.0) * 10));
            
            repaint();
        
    }





    
    int invert(int y){
        return (getPreferredSize().height-50) - y;
    }
    int tamaño(){
        System.out.println("********************  "+ getPreferredSize().height/2);
       return getPreferredSize().height/2;
    }

    @Override
    public void paint (Graphics g) {
        if (valores != null) {
            g.setColor(valores.toColor());
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.red);
            ///RANGO TAMAÑO
            int xT = getPreferredSize().width;
             int yT = getPreferredSize().height;
             int valor1 = yT / rango.size();
      
            for (int i = 0; i <= yT; i+=valor1) {
                if(i>10)
                rangoTam.add((int)(Math.round( i / 10.0) * 10));
                else rangoTam.add(i);}
              rangoTam.add(yT);
                  System.out.println(Arrays.toString(rangoTam.toArray()));
            //RANGO TAMAÑO
            System.out.println(Arrays.toString(rango.toArray()));
            if(!barra.getValores().isEmpty()){
               int puntoinicial = invert((valores.getValores().get(0)+tamaño()))+(tamaño()+valores.getValores().get(0));
             
                for (int i = 0; i < rangoTam.size(); i++) {
                    g.setColor(Color.BLACK);
                g.drawLine(50, puntoinicial -= rangoTam.get(i), getWidth()-20, puntoinicial);
                g.drawString(i+"", 15, puntoinicial);
                }
            }
//
            int suma = 0;
            List<Barra> tam = new ArrayList<>();
            if(valores.getTitulosX().size() == valores.getTitulosY().size() && valores.getValores().size() == valores.getTitulosY().size())
            for (int i = 0; i < valores.getTitulosX().size(); i++) {
                 g.setColor(Color.red);
                 g.fillRect(suma +=60, invert((valores.getValores().get(i)+tamaño())), 40, tamaño()+valores.getValores().get(i));
                 System.out.println(suma+ ", "+invert((valores.getValores().get(i)+tamaño()))+"\n"+(suma+40)+", "+(tamaño()+valores.getValores().get(i)));
                    g.setColor(Color.BLACK);
                  g.drawString(valores.getTitulosX().get(i), suma+5, getHeight()-30);
             
                 
                  
            }
           
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
 
    }//GEN-LAST:event_formComponentMoved

//    @Override
//        public String getToolTipText(MouseEvent event) {
//            for (VertexPoint vp : verticies) {
//                if (vp.contains(event.getPoint())) {
//                    return vp.getVertex().toString();
//                }
//            }
//            return null;
//        }
    
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        System.out.println( evt.getX()+", "+evt.getY());
        if(evt.getX()>=58 && evt.getX() <= 99)
            if(evt.getY()>=105 && evt.getY()<=266)
                System.out.println("estas deentro");
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
